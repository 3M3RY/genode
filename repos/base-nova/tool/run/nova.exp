#
# \brief  NOVA-specific test-environment supplements
# \author Norman Feske
# \date   2010-08-31
#
# This file is meant to be used as '--include' argument for 'tool/run'.
#

set disk_image $env(diskImage)

exec ln -s $disk_image ./[strip_hash $disk_image]
exec ln -s $disk_image $out/[strip_hash $disk_image]
puts $hydra_build_products "file iso $disk_image"

set is_qemu_available 1

##################################
## Test framework API functions ##
##################################

##
# Execute scenario using Qemu
#
proc spawn_qemu { wait_for_re timeout_value } {
	global qemu_args
	set qemu qemu-system-x86_64
	append qemu_args " -cpu core2duo -serial mon:stdio "

	global spawn_id

	# disk booting for now, PXE later
	global disk_image
	append qemu_args " -cdrom $disk_image"

	eval spawn $qemu $qemu_args
	set qemu_spawn_id $spawn_id
	wait_for_output $wait_for_re $timeout_value $qemu_spawn_id
}


proc run_genode_until {{wait_for_re forever} {timeout_value 0} {running_spawn_id -1}} {
	#
	# If a running_spawn_id is specified, wait for the expected output
	#
	if {$running_spawn_id != -1} {
		wait_for_output $wait_for_re $timeout_value $running_spawn_id
		return
	}

	#
	# Try to use one of the supported backends for running the scripts
	#
	if {[is_amt_available]} {
		spawn_amt $wait_for_re $timeout_value
		return
	}
	if {[is_serial_available]} {
		spawn_serial $wait_for_re $timeout_value "NOVA Microhypervisor"
		return
	}
	if {[is_qemu_available]} {
		spawn_qemu $wait_for_re $timeout_value
		return
	}
}

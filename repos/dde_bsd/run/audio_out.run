assert_spec x86

#
# Check used commands
#

set wget [installed_command wget]

#
# Configure
#

set use_mixer 1
set use_patch 0

#
# Build
#

set build_components {
	core init timer
	drivers/audio
	test/audio_out
}

lappend_if $use_mixer build_components server/mixer
lappend_if $use_patch build_components server/stereo_patch

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Config
#

append config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append_if $use_mixer config {
	<start name="mixer">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Audio_in"/>
			<service name="Audio_out"/>
		</provides>
		<config>
			<policy label_suffix="left"  channel="0"/>
			<policy label_suffix="right" channel="1"/>
		</config>
		<route>
			<any-service> <parent/> </any-service>
		</route>
	</start>
}
append_if $use_patch config {
	<start name="stereo_patch">
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="Audio_in"/>
			<service name="Audio_out"/>
		</provides>
		<route>
			<any-service> <parent/> </any-service>
		</route>
	</start>
}
append config {
	<start name="audio_drv">
		<binary name="} [audio_drv_binary] {"/>
		<resource name="RAM" quantum="16M"/>
		<config playback="yes"/>
	</start>
	<start name="sample_a">
		<binary name="test-audio_out"/>
		<resource name="RAM" quantum="8M"/>
		<config>
			<filename>sample_a.raw</filename>
		</config>
	</start>
	<start name="sample_b">
		<binary name="test-audio_out"/>
		<resource name="RAM" quantum="8M"/>
		<config>
			<filename>sample_b.raw</filename>
		</config>
	</start>
</config>}

install_config $config


#
# Get sample file
#

if {[info exists env(GENODE_SAMPLE_RAW)]} {
	catch { exec $wget $::env(GENODE_SAMPLE_RAW) -O bin/sample_a.raw }
	catch { exec $wget $::env(GENODE_SAMPLE_RAW) -O bin/sample_b.raw }
}

if {![file exists bin/sample_a.raw] || ![file exists bin/sample_b.raw]} {
	puts ""
	puts "The sample files are missing. Please take a look at"
	puts "repos/dde_bsd/README, create 'sample.f32' and put"
	puts "the file at './bin/sample_a.raw' and './bin/sample_b.raw'."
	exit 1
}

#
# Boot modules
#

append boot_modules {
	core ld.lib.so init timer } [audio_drv_binary] {
	test-audio_out sample_a.raw sample_b.raw
}

lappend_if $use_mixer boot_modules mixer
lappend_if $use_patch boot_modules stereo_patch

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args "  -nographic -soundhw es1370 "

#
# For obvious reasons the timeout depends on the total
# length of the used sample file.
#
run_genode_until {.*played.*1 time\(s\)} 300
